buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

plugins {
    id 'org.kordamp.gradle.jandex' apply false
    id 'org.ajoberstar.grgit' apply false
    id 'io.codearte.nexus-staging'
    id 'me.champeau.jmh' apply false
}

nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    username = System.getenv("OSSRH_TOKEN_USERNAME") ?: ""
    password = System.getenv("OSSRH_TOKEN_PASSWORD") ?: ""
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.kordamp.gradle.jandex'
    apply from: "${rootProject.rootDir}/gradle/bom.gradle"
    apply from: "${rootProject.rootDir}/gradle/version.gradle"
    apply from: "${rootProject.rootDir}/gradle/reversion.gradle"
    apply from: "${rootProject.rootDir}/gradle/lombok.gradle"
    apply from: "${rootProject.rootDir}/gradle/logging.gradle"
    apply from: "${rootProject.rootDir}/gradle/check.gradle"
    apply from: "${rootProject.rootDir}/gradle/publication.gradle"

    repositories {
        mavenLocal()
        mavenCentral()
    }


    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
        testImplementation("org.hamcrest:hamcrest-all:${hamcrestVersion}")
        testImplementation("org.hamcrest:hamcrest-all:${hamcrestVersion}")
        testImplementation("org.openjdk.jmh:jmh-core:${jmhVersion}")
        testImplementation("org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}")
    }
}
